["function _fbf173b0937a69a76db43247e91bc348f42dca64(){};",21390,37,92,1048484,1048576,826455,"**\n * @private\n *\n * This object handles communication between the WebView and Sencha's native shell.\n * Currently it has two primary responsibilities:\n *\n * 1. Maintaining unique string ids for callback functions, together with their scope objects\n * 2. Serializing given object data into HTTP GET request parameters\n *\n * As an example, to capture a photo from the device's camera, we use `Ext.device.Camera.capture()` like:\n *\n *     Ext.device.Camera.capture(\n *         function(dataUri){\n *             // Do something with the base64-encoded `dataUri` string\n *         },\n *         function(errorMessage) {\n *\n *         },\n *         callbackScope,\n *         {\n *             quality: 75,",262544,51,"500\n *         }\n *     );\n *\n * Internally, `Ext.device.Communicator.send()` will then be invoked with the following argument:\n *\n *     Ext.device.Communicator.send({\n *         command: 'Camera#capture',\n *         callbacks: {\n *             onS",1711628,36,"    // ...",741472,34,"onErro",1224208,35,"// ...",1320223,34,"         scope: callbackScope,\n *         quality: 75,\n *",262551,32,"height: 500\n *     });\n *\n * Which will then be transformed into a HTTP GET request, sent to native shell's local\n * HTTP server",1559704,33,"*\n *     ?quality=75&width=500&height=500&command=Camera%23capture&onSuccess=3&onError=5\n *\n * Notice that `onSuccess` and `onError` have been converted into string ids (`3` and `5`\n * respectively) and maintained by `Ext.device.Communicator`.\n *\n * Whenever the requested operation finishes, `Ext.device.Communicator.invoke()` simply needs\n * to be executed from the native shell with the corresponding ids given before. For example:\n *\n *     Ext.device.Communicator.invoke('3', ['DATA_URI_OF_THE_CAPTURED_IMAGE_HERE']);\n *\n * will invoke the original `onSuccess` callback under the given scope. (`callbackScope`), with\n * the first argument of 'DATA_URI_OF_THE_CAPTURED_IMAGE_HERE'\n *\n * Note that `Ext.device.Communicator` maintains the uniqueness of each function callback and\n * its scope object. If subsequent calls to `Ext.device.Communicator.send()` have the same\n * callback references, the same old ids will simply be reused, which guarantee the best possible\n * performance for a large amount of repetitive calls.\n */\r\nExt.define('Ext.device.communicator.Default', {\r\n    SERVER_URL: 'http://localhost:3000',\r\n    // Change this to the correct server URL\r\n    callbackDataMap: {},\r\n    callbackIdMap: {},\r\n    idSeed: 0,\r\n    globalScopeId: '0',\r\n    generateI",1614015,32,"String(++this.idSeed);\r\n    },\r\n    getId",537616,34,"id = object.$callbackI",407056,36,"object.$callbackId = id = this.generat",1809262,34,"id;\r\n    },\r\n    getCallbackId: function(",1616287,32,"idMap = this.callbackIdMap,\r\n            dataMap = this.callbackDataMap,\r\n            id, scopeId, callbackId, data;\r\n",774079,35,"scopeId = this.globalScopeId;\r\n        } else if (",504398,37,"scopeId = scope.getId",981583,35,"scopeId = this.getId(scope);\r\n        }\r\n        callbackId = this.getId(callback);\r\n        if (!idMap[scopeId]) {\r\n            idMap[scopeId]",530956,32,"idMap[scopeId][callbackId]) {\r\n            id = this.generateId();\r\n            data",1742367,32,"callback",349083,46,";\r\n            idMap[scopeId][callbackId] = id;\r\n            dataMap[id] = d",862400,32,"idMap[scopeId][callbackId];\r\n    },\r\n    getCallbackData",584112,38,"callbackDataMap[id]",494459,32,"id, args) {\r\n        var data = this.getCallbackData(id);\r\n        data.callback.apply(data.scope, args);\r\n    },\r\n    send: function(args) {\r\n        var callbacks, scope, name, callback;",510346,43,"{};\r\n        } else if (args.callbacks) {\r\n            callbacks = args.callbacks;\r\n            scope = args.scope;\r\n            delete args.callbacks;\r\n            delete args.scope;\r\n            for (name in callbacks) {\r\n                if (callback",2046544,47,"callback = callback",141339,41,1617772,39,"            args[name] = this.getCallbackId(callback, scop",2064016,77,"    args.__source = document.location.href;\r\n        var result = this.doSend(args);\r\n        return (result && result.length > 0) ? JSON.parse(result) : null;\r\n    },\r\n    doSend: function(args) {\r\n",382129,49,"xhr.open('GET', this.SERVER_URL + '?' + Ext.Object.toQueryString(args) + '&_dc=' + new Date().getTime(), false);\r\n        // wrap the request in a try/catch block so we can check if any errors are thrown and attempt to call any\r\n        // failure/callback functions if defined\r\n        try {\r\n",282770,41,"return xhr.responseText;",1166158,37,"if (args.failure) {\r\n                this.invoke(args.failure);\r\n            } else if (args.callback) {\r\n                this.invoke(args.callback)",1025408,80,"device.communicator.Android', {\r\n    extend: Ext.device.communicator.Default,\r\n    doSend",1920707,35,"window.Sencha.action(JSON.stringify(args",964383,56,"device.Communicato",1041551,33,859855,35,1252792,38,"return new Ext.device.communicator.Androi",1809264,32,"new Ext.device.communicator.Defaul",1399375,57,"device.filesystem",1913654,38,"fileSystemType: 1,\r\n        fileSystemSize: 0,\r\n        readerType: \"text\",\r\n        stringEncoding: \"UTF8\"\r\n    },\r\n    requestFileSystem",886960,42,"onfig = Ext.device.filesystem.Abstract.prototype.config;\r\n",1720093,52,"type: defaultConfig.fileSystemType,\r\n            size: defaultConfig.fileSystemSize,\r\n            success: Ext.emptyFn,\r\n            failure",2116217,32,"    return config",867568,54,"device.filesystem.Sencha', {\r\n    extend: Ext.device.filesystem.Abstract,\r\n    /**\n     * Requests a {@link Ext.device.filesystem.FileSystem} instance",1739392,32,"config\n     * The object which contains",316632,70,"success This is required.\n     * The callback to be called when the file system has been successfully created.\n     *\n     * @param {Ext.device.filesystem.FileSystem} config.success.fileSystem\n     * The created file system",574144,34,"config.failure This is optional.\n     * The callback to be called when an error occurred",1739392,32,"config.failure.error\n     * The occurred error",1739392,32,"config.scope\n     * The scope object\n     */\r\n    requestFileSystem",1290079,34,"!config.success",947886,34,"'Ext.device.filesystem#requestFileSystem: You must specify a `success` callback.');",473184,47,"Ext.device.Communicator.send({\r\n            command: 'FileSystem#requestFileSystem',\r\n            callbacks: {\r\n",1320767,34,"id) {\r\n                    var fileSystem = Ext.create('Ext.device.filesystem.FileSystem', id);\r\n                    config.success.call(config.scope || this, fileSystem);",179629,38,"failure:",2133002,36,"    if (config.failure",1295549,37,"ailure.call(config.scope || this, error",340576,59,",\r\n            scope: config.scope || this",1306501,34,") {\r\n    /**\n     * The FileSystem class which is used to represent a file system.\n     */\r\n    Ext.define('Ext.device.filesystem.FileSystem', {\r\n        id: 0,\r\n        root: null,",22942,32,"id) {\r\n            this.id = id;\r\n            this.root = Ext.create('Ext.device.filesystem.DirectoryEntry', '/', ",151695,43,"Returns a {@link Ext.device.filesystem.DirectoryEntry} instance for the root of the file system",133893,33,"Ext.device.filesystem.DirectoryEntry}\n         * The file system root directory.\n         */\r\n        getRoot",25520,41,"oot",1016192,45,"*\n         * The Entry class which is used to represent entries in a file system,\n         * each of which may be a {@link Ext.device.filesystem.FileEntry} or a {@link Ext.device.filesystem.DirectoryEntry}.\n         *\n         * This is an abstract class.\n         * @abstract\n         */\r\n        Ext.define('Ext.device.filesystem.Entry', {\r\n            directory: false,\r\n            path: 0,\r\n            fileSystem: null",424699,38,"irectory, path, fileSystem) {\r\n                this.directory = directory;\r\n                this.path = path;\r\n                this.fileSystem = fileSystem",224016,44,"    * Returns whether the entry is a file",266081,32,"@return {Boolean}\n             * The entry is a fil",1387071,32,"isFile",345664,32,"return !this.directory",224016,44,"    * Returns whether the entry is a directory",266081,32,"@return {Boolean}\n             * The entry is a directory.\n             */\r\n            isDirectory",345664,32,"return this.directory",224016,44,"    * Returns the name of the entry, excluding the path leading to it",266081,32,"@return {String}\n             * The entry nam",1387071,32,"getName",345664,32,"var components = this.path.split('/'",2140799,33,"components.length - 1; i >= 0; --i",73320,33,"onents[i]",509776,36,"    return",1188821,37,218880,45,"'/",224895,45,"    * Returns the full absolute path from the root to the entry",266081,32,"@return {String}\n             * The entry full path.\n             */\r\n            getFullPath",345664,32,"return this.path",224016,44,"    * Returns the file system on which the entry reside",266080,33,"@return {Ext.device.filesystem.FileSystem}\n             * The entry file system.\n             */\r\n            getFileSystem",345664,32,"return this.fileSystem",224016,44,"    * Moves the entry to a different location on the file system",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Ext.device.filesystem.DirectoryEntry} config.parent This is required.\n             * The directory to which to move the entry",266081,32,"@param {String} config.newName This is optional.\n             * The new name of the entry to move. Defaults to the entry's current name if unspecified",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the entry has been successfully moved",266081,32,"@param {Ext.device.filesystem.Entry} config.success.entry\n             * The entry for the new location",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope objec",1617564,32,"oveTo",810048,34,"    if (config.parent ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.Entry#moveTo: You must specify a new `parent` of the entry.');",1456761,53,"\r\n",2626990,48,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#moveTo',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    parentPath: config.parent.path,\r\n                    newName: config.newName,\r\n                    copy: config.copy,\r\n                    callbacks: {\r\n       ",1320766,35,"path",105376,37,"config.succes",2496896,42,"entry = me.directory ? Ext.create('Ext.device.filesystem.DirectoryEntry', path, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', path, me.fileSystem",350480,36,"config.success.call(config.scope || this, entry",300880,60,",\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Works the same way as {@link Ext.device.filesystem.Entry#moveTo}, but copies the entry.\n             */\r\n            copyTo",810048,34,"    this.moveTo(Ext.apply(config, {\r\n                    copy: true\r\n",1562101,34,"}",265776,34,"Removes the entry from the file system",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n        ",316670,32,"success This is optional.\n             * The callback to be called when the entry has been successfully removed",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object",1164225,32,"mov",810560,35,"    Ext.device.Communicator.send({\r\n                    command: 'FileSystem#remove',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    recursively: config.recursively,\r\n                    callbacks: {\r\n       ",1320766,35,105376,37,"config.succes",2496896,38,"config.success.call(config.scope || thi",228688,60,"},\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Looks up the parent directory containing the entry",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n        ",316670,32,"success This is required.\n             * The callback to be called when the parent directory has been successfully selected",266081,32,"@param {Ext.device.filesystem.DirectoryEntry} config.success.entry\n             * The parent directory of the entry",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            getPar",2025102,33,"        if (!config.success",345280,36,"error('Ext.device.filesystem.Entry#getParent: You must specify a `success` callback.');",1456761,53,"\r\n",2626990,48,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#getParent',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    callbacks: {\r\n       ",1320766,35,"path",105376,33,"var entry = me.directory ? Ext.create('Ext.device.filesystem.DirectoryEntry', path, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', path, me.fileSystem",228784,32,"config.success.call(config.scope || this, entry);\r\n    ",1014731,44,"    failure:",2133002,36,"            if (config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,52,");\r\n        /**\n         * The DirectoryEntry class which is used to represent a directory on a file system.\n         */\r\n        Ext.define('Ext.device.filesystem.DirectoryEntry', {\r\n            extend: Ext.device.filesystem.Entry",424699,37,"path, fileSystem) {",2114941,34,"[\r\n    ",423723,39,"    path,\r\n                    fileSystem",1740749,36,265776,34,"Lists all the entries in the directory",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n        ",316670,32,"success This is required.\n             * The callback to be called when the entries has been successfully read",266081,32,"@param {Ext.device.filesystem.Entry[]} config.success.entries\n             * The array of entries of the directory",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object",1164225,32,"adEntries",810048,34,"    if (!config.success",345280,36,"error('Ext.device.filesystem.DirectoryEntry#readEntries: You must specify a `success` callback.');",1456761,53,"\r\n",2626990,48,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#readEntries',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    callbacks: {\r\n       ",1320766,35,"entryInfo",2496896,34,"var entries = entryInfos.map(function(entryInf",525776,34,"        return entryInfo.directory ? Ext.create('Ext.device.filesystem.DirectoryEntry', entryInfo.path, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', entryInfo.path, me.fileSystem",350480,37,228784,32,"config.success.call(config.scope || this, entries);\r\n    ",1014731,44,"    failure:",2133002,36,"            if (config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Creates or looks up a file",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *",1527942,32,"config.path This is required.\n             * The absolute path or relative path from the entry to the file to create or select",266081,32,"@param {Object} config.options This is optional.\n             * The object which contains the following options:\n             *\n             * @param {Boolean} config.options.create This is optional.\n             * Indicates whether to create a file, if path does not exist",266081,32,"@param {Boolean} config.options.exclusive This is optional. Used with 'create', by itself has no effect.\n             * Indicates that method should fail, if path already exist",266080,33,1719150,33,"This is optional.\n             * The callback to be called when the file has been successfully created or selected",266081,32,"@param {Ext.device.filesystem.Entry} config.success.entry\n             * The created or selected file",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            getFi",810559,36,"    if (config.path ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.DirectoryEntry#getFile: You must specify a `path` of the file.');",1456761,53,"\r\n                if (config.options ",2046736,32,"config.options",2113533,43,2627006,32,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#getEntry',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    newPath: config.path,\r\n                    directory: config.directory,\r\n                    create: config.options.create,\r\n                    exclusive: config.options.exclusive,\r\n                    callbacks: {\r\n       ",1320766,35,"path",105376,37,"config.succes",2496896,42,"entry = config.directory ? Ext.create('Ext.device.filesystem.DirectoryEntry', path, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', path, me.fileSystem",350480,36,"config.success.call(config.scope || this, entry",300880,60,",\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Works the same way as {@link Ext.device.filesystem.DirectoryEntry#getFile},\n             * but creates or looks up a directory.\n             */\r\n            getDirectory",810048,34,"    this.getFile(Ext.apply(config, {\r\n                    directory: true\r\n",1562101,34,"}",265776,34,"Works the same way as {@link Ext.device.filesystem.Entry#remove},\n             * but removes the directory and all of its contents, if any",1164224,33,"moveRecursively",810048,34,"    this.remove(Ext.apply(config, {\r\n                    recursively: true\r\n",1562101,34,"}\r\n        });\r\n        /**\n         * The FileEntry class which is used to represent a file on a file system.\n         */\r\n        Ext.define('Ext.device.filesystem.FileEntry', {\r\n            extend: Ext.device.filesystem.Entry,\r\n            offset: 0",424699,37,"path, fileSystem) {",2114941,34,"[\r\n    ",423746,40,"    path,\r\n                    fileSystem",1740749,35,"    this.offset = 0",224016,44,"    * Returns the byte offset into the file at which the next read/write will occur",266081,32,"@return {Number}\n             * The file offset.\n             */\r\n            getOffs",345662,34,"return this.offse",218928,45,"    * Sets the byte offset into the file at which the next read/write will occur",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Number} config.offset This is required.\n             * The file offset to set. If negative, the offset back from the end of the file",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the file offset has been successfully set",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            seek",810048,34,"    if (config.offset ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.FileEntry#seek: You must specify an `offset` in the file.');",1456761,53,"\r\n",2626990,48,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#seek',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    offset: config.offset,\r\n                    callbacks: {\r\n       ",1320766,35,"offs",105374,35,"me.offset = offs",526494,33,"if (config.succes",2496896,38,"config.success.call(config.scope || thi",228688,60,"},\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Reads the data from the file starting at the file offset",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Number} config.length This is optional.\n             * The length of bytes to read from the file. Defaults to the file's current size if unspecified",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the data has been successfully read",266081,32,"@param {Object} config.success.data\n             * The read data",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object",1164225,32,"ad",810048,34,3217103,36,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#read',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    offset: this.offset,\r\n                    length: config.length,\r\n                    callbacks: {\r\n       ",1320766,35,"r",3381584,38,"me.offset = result.offs",526494,33,"if (config.succes",2496896,38,"config.success.call(config.scope || this, result.",229853,32,298189,32,",\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Writes the data to the file starting at the file offset",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *",806556,32,"config.data This is required.\n             * The data to write to the file",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the data has been successfully written",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            writ",810560,35,"    if (config.data ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.FileEntry#write: You must specify a `data` for the file.');",1456761,53,"\r\n",2626990,48,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#write',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    offset: this.offset,\r\n                    data: config.data,\r\n                    callbacks: {\r\n       ",1320766,35,"offs",105374,35,"me.offset = offs",526494,33,"if (config.succes",2496896,38,"config.success.call(config.scope || thi",228688,60,"},\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,41,265776,34,"Truncates or extends the file to the specified size in bytes.\n             * If the file is extended, the added bytes are null byte",266080,33,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Number} config.size This is required.\n             * The new file size",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the file size has been successfully changed",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            truncat",810560,35,"    if (config.size ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.FileEntry#truncate: You must specify a `size` of the file.');",1456761,53,"\r\n",2626990,48,"Ext.device.Communicator.send({\r\n                    command: 'FileSystem#truncate',\r\n                    path: this.path,\r\n                    fileSystemId: this.fileSystem.id,\r\n                    offset: this.offset,\r\n                    size: config.size,\r\n                    callbacks: {\r\n       ",1320766,35,"offs",105374,35,"me.offset = offs",526494,33,"if (config.succes",2496896,38,"config.success.call(config.scope || thi",228688,60,"},\r\n       ",1326594,35,"error",105376,37,"config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,83,",\r\n                    scope: config.scope ||",731008,52,");\r\n    });",1930864,46,"device.filesystem.HTML5', {\r\n    extend: Ext.device.filesystem.Abstract,\r\n    /**\n     * Requests a {@link Ext.device.filesystem.FileSystem} instance.\n     *\n     *      var me = this;\n     *      var fs = Ext.create(\"Ext.device.FileSystem\", {});\n     *      fs.requestFileSystem({\n     *          type: window.PERSISTENT,\n     *          size: 1024 * 1024,\n     *          success: function(fileSystem) {\n     *              me.fs = fileSystem;\n     *          },\n     *          failure: function(err) {\n",161563,32,"\"FileSystem Failure: \" + err.code",202886,32,316576,41,"\n     * The object which contains",316632,53,"Number} config.type\n     * window.TEMPORARY (0) or window.PERSISTENT (1)\n     *\n     * @param {Number} config.size\n     * Storage space, in Bytes, needed by the application",1558736,33,"config.success This is required.\n     * The callback to be called when the file system has been successfully created.\n     *\n     * @param {Ext.device.filesystem.FileSystem} config.success.fileSystem\n     * The created file system",574144,34,"config.failure This is optional.\n     * The callback to be called when an error occurred",1739392,32,"config.failure.error\n     * The occurred error",1739392,32,"config.scope\n     * The scope object\n     */\r\n    requestFileSystem",1290079,34,"!config.success",947886,34,"'Ext.device.filesystem#requestFileSystem: You must specify a `success` callback.');",473184,47,"var me = this;\r\n        var successCallback = function(fs) {\r\n                var fileSystem = Ext.create('Ext.device.filesystem.FileSystem', fs);\r\n                config.success.call(config.scope || me, fileSystem);\r\n            };",2132400,35,"config.type, config.size, successCallback, config.failure || Ext.emptyFn",1603980,43,"The FileSystem class which is used to represent a file system.\n     */\r\n    Ext.define('Ext.device.filesystem.FileSystem', {\r\n        fs: null,\r\n        root: null,",22942,32,"fs) {\r\n            this.fs = fs;\r\n            this.root = Ext.create('Ext.device.filesystem.DirectoryEntry', '/', ",151695,43,"Returns a {@link Ext.device.filesystem.DirectoryEntry} instance for the root of the file system",133893,33,"Ext.device.filesystem.DirectoryEntry}\n         * The file system root directory.\n         */\r\n        getRoot",25520,41,"oot",1016192,45,"*\n         * The Entry class which is used to represent entries in a file system,\n         * each of which may be a {@link Ext.device.filesystem.FileEntry} or a {@link Ext.device.filesystem.DirectoryEntry}.\n         *\n         * This is an abstract class.\n         * @abstract\n         */\r\n        Ext.define('Ext.device.filesystem.Entry', {\r\n            directory: false,\r\n            path: 0,\r\n            fileSystem: null,\r\n            entry: null",424699,38,"irectory, path, fileSystem) {\r\n                this.directory = directory;\r\n                this.path = path;\r\n                this.fileSystem = fileSystem",224016,44,"    * Returns whether the entry is a file",266081,32,"@return {Boolean}\n             * The entry is a fil",1387071,32,"isFile",345664,32,"return !this.directory",224016,44,"    * Returns whether the entry is a directory",266081,32,"@return {Boolean}\n             * The entry is a directory.\n             */\r\n            isDirectory",345664,32,"return this.directory",224016,44,"    * Returns the name of the entry, excluding the path leading to it",266081,32,"@return {String}\n             * The entry nam",1387071,32,"getName",345664,32,"var components = this.path.split('/'",2140799,33,"components.length - 1; i >= 0; --i",73320,33,"onents[i]",509776,36,"    return",1188821,37,218880,45,"'/",224895,45,"    * Returns the full absolute path from the root to the entry",266081,32,"@return {String}\n             * The entry full path.\n             */\r\n            getFullPath",345664,32,"return this.path",224016,44,"    * Returns the file system on which the entry reside",266080,33,"@return {Ext.device.filesystem.FileSystem}\n             * The entry file system.\n             */\r\n            getFileSystem",345664,32,"return this.fileSystem",1170275,34,"Entry",345664,32,100923,51,"        * Moves the entry to a different location on the file system",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Ext.device.filesystem.DirectoryEntry} config.parent This is required.\n             * The directory to which to move the entry",266081,32,"@param {String} config.newName This is optional.\n             * The new name of the entry to move. Defaults to the entry's current name if unspecified",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the entry has been successfully moved",266081,32,"@param {Ext.device.filesystem.Entry} config.success.entry\n             * The entry for the new location",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope objec",1617564,32,"oveTo",810048,34,"    if (config.parent ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.Entry#moveTo: You must specify a new `parent` of the entry.');",1456761,53,"\r\n",2626990,48,"this.getEntry(",1152450,32,"config.",533940,32,"    success: function(sourceEntry",1295549,36,"parent.getEntry",846000,32,"options: config.",533940,32,"            success: function(destinationEntry",148832,37,"if (config.copy",148832,37,"    sourceEntry.copyTo(destinationEntry, config.newName",2132562,37,"                        config.success.call(config.scope || me, entry.isDirectory ? Ext.create('Ext.device.filesystem.DirectoryEntry', entry.fullPath, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', entry.fullPath, me.fileSystem",3285600,42,", config.failur",3434048,37,558256,34,"            sourceEntry.moveTo(destinationEntry, config.newName",2132562,37,"                        config.success.call(config.scope || me, entry.isDirectory ? Ext.create('Ext.device.filesystem.DirectoryEntry', entry.fullPath, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', entry.fullPath, me.fileSystem",3285600,42,", config.failur",3434048,37,661792,32,",\r\n                            failure: config.failure\r\n    ",6012,41,"    },\r\n                    failure: config.failure",45392,35,"}",265776,34,"Works the same way as {@link Ext.device.filesystem.Entry#moveTo}, but copies the entry.\n             */\r\n            copyTo",810048,34,"    this.moveTo(Ext.apply(config, {\r\n                    copy: true\r\n",1562101,34,"}",265776,34,"Removes the entry from the file system",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Boolean} config.recursively This is optional\n             * Deletes a directory and all of its content",266290,32,1719150,33,"This is optional.\n             * The callback to be called when the entry has been successfully removed",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object",1164225,32,"mov",810560,35,"    this.getEntry({\r\n   ",1320766,35,"entry",87264,33,"config.recursively && this.directory",105376,33,"entry.removeRecursively(config.success, config.failure);\r\n    ",10749,54,"    entry.remove(config.success, config.failur",1147328,53,",\r\n                    failure: config.failure",45392,35,"}",265776,34,"Looks up the parent directory containing the entry",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n        ",316670,32,"success This is required.\n             * The callback to be called when the parent directory has been successfully selected",266081,32,"@param {Ext.device.filesystem.DirectoryEntry} config.success.entry\n             * The parent directory of the entry",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            getPar",2025102,33,"        if (!config.success",345280,36,"error('Ext.device.filesystem.Entry#getParent: You must specify a `success` callback.');",1456761,53,"\r\n",2626990,48,"this.getEntry(",1152450,32,"config.",533940,32,"    success:",2132563,36,"        entry.getParent(function(parentEntry",105376,33,"config.success.call(config.scope || me, parentEntry.isDirectory ? Ext.create('Ext.device.filesystem.DirectoryEntry', parentEntry.fullPath, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', parentEntry.fullPath, me.fileSystem));\r\n                        }, config.failure);",1014729,46,"failure: config.failure",45392,35,"}\r\n        });\r\n        /**\n         * The DirectoryEntry class which is used to represent a directory on a file system.\n         */\r\n        Ext.define('Ext.device.filesystem.DirectoryEntry', {\r\n            extend: Ext.device.filesystem.Entry,\r\n            cachedDirectory: null",424699,37,"path, fileSystem) {",2114941,34,"[\r\n    ",423723,39,"    path,\r\n                    fileSystem",1740749,36,265776,34,"Requests a Directory from the Local File System\n             *",806556,32,"config\n             * ",806556,32,"config.options\n             * File creation options {create:true, exclusive:false",266514,32,"@param {Boolean} config.options.create\n             * Indicates if the directory should be created if it doesn't exist\n             *\n             * @param {Boolean} config.options.exclusive\n             * Used with the create option only indicates whether a creation causes an error if the directory already exist",266290,32,1719150,32,"\n             * The function called when the Directory is returned successfully\n             *\n             * @param {Ext.device.filesystem.DirectoryEntry} config.success.directory\n             * DirectoryEntry Object\n             *\n        ",316670,32,"failure\n             * The function called when the Directory request causes an error\n             *\n             * @param {FileError} config.failure.error\n             */\r\n            getEntry",810048,34,3217103,36,"var callback = config.success;\r\n                if ((config.options && config.options.create) && this.path) {\r\n                    var folders = this.path.split(\"/\");\r\n                    if (folders[0] == '.' || folders[0] == '",301006,32,"lders = folders.slice(1",234048,43,"    var recursiveCreation = function(dirEntry",105376,37,"folder",1456063,33,"            dirEntry.getDirectory(folders.shift(), config.options, recursiveCreation, config.failur",99024,75,"callback(dirEntry",300880,60,1751128,32,"Creation(this.fileSystem.fs.root",329744,50,"this.fileSystem.fs.root.getDirectory(this.path, config.options, function(directory",1295549,36,"success.call(config.scope || me, directory);\r\n                    }, config.failur",858016,37,265776,34,"Lists all the entries in the directory",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n        ",316670,32,"success This is required.\n             * The callback to be called when the entries has been successfully read",266081,32,"@param {Ext.device.filesystem.Entry[]} config.success.entries\n             * The array of entries of the directory",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object",1164225,32,"adEntries",810048,34,"    if (!config.success",345280,36,"error('Ext.device.filesystem.DirectoryEntry#readEntries: You must specify a `success` callback.');",1456761,53,"\r\n",2626990,48,"this.getEntry({\r\n   ",1320766,35,"dirEntry",103233,33,"directoryReader = dirEntry.createReader();\r\n                        directoryReader.readEntries(function(entryInfo",2496896,34,"var entries = [",2751360,36,3315007,40,"len = entryInfo",103632,35,1460416,40,"                    entryInfo = entryInfo",286032,35,"    entries[i] = entryInfo.isDirectory ? Ext.create('Ext.device.filesystem.DirectoryEntry', entryInfo.fullPath, me.fileSystem) : Ext.create('Ext.device.filesystem.FileEntry', entryInfo.fullPath, me.fileSystem",300880,59,"    config.success.call(config.scope || this, entries);\r\n            ",2132988,50,"            if (config.failur",104096,34,"    config.failure.call(config.scope || this, error",300880,60,");",1014729,46,"failure: config.failure",45392,35,"}",265776,34,"Creates or looks up a file",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *",1527942,32,"config.path This is required.\n             * The absolute path or relative path from the entry to the file to create or select",266081,32,"@param {Object} config.options This is optional.\n             * The object which contains the following options:\n             *\n             * @param {Boolean} config.options.create This is optional.\n             * Indicates whether to create a file, if path does not exist",266081,32,"@param {Boolean} config.options.exclusive This is optional. Used with 'create', by itself has no effect.\n             * Indicates that method should fail, if path already exist",266080,33,1719150,33,"This is optional.\n             * The callback to be called when the file has been successfully created or selected",266081,32,"@param {Ext.device.filesystem.Entry} config.success.entry\n             * The created or selected file",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            getFi",810559,36,"    if (config.path ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.DirectoryEntry#getFile: You must specify a `path` of the file.');",1456761,53,"\r\n",2626990,48,"var fullPath = this.path + config.path;",2132581,34,"Ext.create('Ext.device.filesystem.FileEntry', fullPath, this.fileSystem);\r\n                fileEntry.getEntry({\r\n   ",1320766,35,1295549,36,"success.call(config.scope || me, fileEntry);",1014729,46,"options: config.",533940,32,"    failure: config.failure",45392,35,"}",265776,34,"Works the same way as {@link Ext.device.filesystem.DirectoryEntry#getFile},\n             * but creates or looks up a directory.\n             */\r\n            getDirectory",810048,34,"    if (config.path ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.DirectoryEntry#getFile: You must specify a `path` of the file.');",1456761,53,"\r\n",2626990,48,"var fullPath = this.path + config.path;\r\n                var directoryEntry = Ext.create('Ext.device.filesystem.DirectoryEntry', fullPath, this.fileSystem);\r\n                directoryEntry.getEntry({\r\n   ",1320766,35,1295549,36,"success.call(config.scope || me, directoryEntry);",1014729,46,"options: config.",533940,32,"    failure: config.failure",45392,35,"}",265776,34,"Works the same way as {@link Ext.device.filesystem.Entry#remove},\n             * but removes the directory and all of its contents, if any",1164224,33,"moveRecursively",810048,34,"    this.remove(Ext.apply(config, {\r\n                    recursively: true\r\n",1562101,34,"}\r\n        });\r\n        /**\n         * The FileEntry class which is used to represent a file on a file system.\n         */\r\n        Ext.define('Ext.device.filesystem.FileEntry', {\r\n            extend: Ext.device.filesystem.Entry,\r\n            length: 0,\r\n            offset: 0",424699,37,"path, fileSystem) {",2114941,34,"[\r\n    ",423746,40,"    path,\r\n                    fileSystem",1740749,35,"    this.offset = 0;\r\n                this.length = 0",224016,44,"    * Requests a File Handle from the Local File System\n             *",806556,32,"config\n             * ",1527942,32,"config.file\n             * Filename optionally including path in string format '/tmp/debug.txt' or a File Object\n             *",806556,32,"config.options\n             * File creation options {create:true, exclusive:false",266514,32,"@param {Boolean} config.options.create\n             * Indicates if the file should be created if it doesn't exist\n             *\n             * @param {Boolean} config.options.exclusive\n             * Used with the create option only indicates whether a creation causes an error if the file already exist",266290,32,1719150,32,"\n             * The function called when the filesystem is returned successfully\n             *\n             * @param {FileSystem} config.success.entry\n             *\n        ",316670,32,"failure\n             * The function called when the filesystem request causes and error\n             *\n             * @param {FileError} config.failure.error\n             *\n             */\r\n            getEntry",810048,34,3217103,36,"var originalConfig = Ext.applyIf({}, config);\r\n                if (this.fileSystem) {\r\n                    var failur",2132748,45,"    if ((config.options && config.options.create) && Ext.isString(this.path",5040,34,"    var folders = this.path.split(\"/",3208656,37,"if (folders[0] == '.' || folders[0] == ''",148832,37,"    folders = folders.slice(1",350480,37,92864,34,"if (folders.length > 1 && !config.recursive",180170,42,"        folders.pop",2762480,41,"var dirEntry = Ext.create('Ext.device.filesystem.DirectoryEntry', folders.join(\"/\"), me.fileSystem",350480,36,"    dirEntry.getEntry",2726080,44,"options: config.",1699758,34,1320767,34,148832,37,"            originalConfig.recursive",3314416,54,"me.getEntry(originalC",1295695,33,1014735,40,"                    failure: config.failur",2745296,40,350480,37,2497616,45,"if (config.failur",104096,34,"            config.failure.call(config.scope || me, evt",350480,36,661136,35,661136,35,558256,34,"        if (config.failur",104096,34,"        config.failure.call(config.scope || me, evt",350480,37,94095,57,"};\r\n                    this.fileSystem.fs.root.getFile(this.path, config.options || null, function(fileEntry",1439426,32,"eEntry.file(function(fi",3368992,35,"me.length = file.siz",148480,32,"originalConfig.success.call(config.scope || me, fileEntry);\r\n            ",2132988,50,"            failure.call(config.scope || me, error",526528,54,2133001,37,"        failure.call(config.scope || me, error);",6010,44,774978,32,"fig.failure({\r\n                        code: -1,\r\n                        message: \"FileSystem not Initialized\"",6010,58,"}",265776,34,"Returns the byte offset into the file at which the next read/write will occur",266081,32,"@return {Number}\n             * The file offset.\n             */\r\n            getOffs",345662,34,"return this.offse",218928,45,"    * Sets the byte offset into the file at which the next read/write will occur",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Number} config.offset This is required.\n             * The file offset to set. If negative, the offset back from the end of the file",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the file offset has been successfully set",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            seek",810048,34,"    if (config.offset ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.FileEntry#seek: You must specify an `offset` in the file.');",1456761,53,"\r\n                this.offset = config.offset || 0;\r\n                if (config.success",1518341,32,"success.call(config.scope || ",776160,40,265776,34,"Reads the data from the file starting at the file offset",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Number} config.length This is optional.\n             * The length of bytes to read from the file. Defaults to the file's current size if unspecified",266081,32,"@param {String} config.encoding\n             * Optional encoding type used only for reading as Text\n             *",1527942,32,"config.type\n             * Type of reading to use options are \"text\" (default), \"dataURL\", \"binaryString\" and \"arrayBuffer\"\n             *",806556,32,"config.reader\n             * Optional config params to be applied to a File Reader\n             *\n        ",316670,32,"reader.onloadstart\n        ",316670,32,"reader.onloadprogress\n        ",316670,32,"reader.onload\n        ",316670,32,"reader.onabort\n        ",316670,32,"reader.onerror\n        ",316670,32,"reader.onloadend\n             *\n        ",316670,32,"success This is optional.\n             * The callback to be called when the data has been successfully read",266081,32,"@param {Object} config.success.data\n             * The read data",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object",1164225,32,"ad",810048,34,3217103,36,"this.getEntry({\r\n   ",1320766,35,"fileEntry",1439426,32,"eEntry.file(function(fi",3368992,35,"if (Ext.isNumber(config.length",5040,34,"    if (Ext.isFunction(file.slice",5040,34,"        file = file.slice(me.offset, config.length",350480,37,2497616,45,"if (config.failur",104096,34,"            config.failure.call(config.scope || me,",218576,32,"                code: -",3240416,36,"            message: \"File missing slice functionality\"",94480,42,2726352,41,2525088,39,228816,33,105296,35,661136,35,"var reader = new FileReader",350688,33,"reader.onloadend",2132749,44,"        config.success.call(config.scope || me, evt.target.result",300880,33,";",1261025,32,"ader.onerror =",2133002,36,"                config.failure.call(config.scope || me, error",300880,33,93583,35,"config.reader",148832,37,"reader = Ext.applyIf(reader, config.reader",300880,59,"    config.encoding = config.encoding || \"UTF8\";\r\n                            switch (config.",1764943,33,410960,46,"    case \"text\":",94480,38,"reader.readAsText(file, config.encoding",350480,36,193984,36,"        case \"dataURL\":",94480,38,"reader.readAsDataURL(fi",3434047,42,241520,40,"case \"binaryString\":",94480,38,"reader.readAsBinaryString(fi",3434047,42,241520,40,"case \"arrayBuffer\":",94480,38,"reader.readAsArrayBuffer(fi",3434047,42,241520,36,"}\r\n            ",2132988,50,"            config.failure.call(config.scope || me, error",526528,54,",\r\n   ",1326594,35,"error",1295549,37,"ailure.call(config.scope || me, error",234048,44,20752,32,"/**\n             * Writes the data to the file starting at the file offset",266081,32,"@param {Object} config\n             * The object which contains",316632,36,"        *",806556,32,"config.data This is required.\n             * The data to write to the file",266081,32,"@param {Boolean} config.append This is optional.\n             * Append to the end of the file\n             *",806556,32,"config.writer\n             * Optional config params to be applied to a File Reader\n             *\n        ",316670,32,"writer.onwritestart\n        ",316670,32,"writer.onprogress\n        ",316670,32,"writer.onwrite\n        ",316670,32,"writer.onabort\n        ",316670,32,"writer.onerror\n        ",316670,32,"writer.onwriteend\n             *\n        ",316670,32,"success This is optional.\n             * The callback to be called when the data has been successfully written",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            writ",810560,35,"    if (config.data ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.FileEntry#write: You must specify `data` to write into the file.');",1456761,53,"\r\n",2626990,48,"this.getEntry(",1152450,32,"config.",533940,32,"    success: function(fileEntry",1439426,32,"eE",2132677,58,"        writer.onwriteend",2132749,44,"        me.length = evt.target",855805,34,"        config.success.call(config.scope || me, evt.result",300880,33,";\r\n                            writer.onerror =",2133002,36,"                config.failure.call(config.scope || me, error",300880,33,93583,35,"config.writer",148832,37,"writer = Ext.applyIf(writer, config.writer",300880,59,"    if (me.offset",148832,37,"writer.seek(me.offset",300880,33," else if (config.appen",2797664,34,"    writer.seek(me.length",300880,59,"    me.writeData(writer, config.",229853,33,2133001,37,"            config.failure.call(config.scope || me, error",526528,54,",\r\n   ",1326594,35,"error",1295549,37,"ailure.call(config.scope || me, error",234048,44,20752,32,"writeData: function(writer, data) {\r\n                writer.write(new Blob([\r\n                    data\r\n                ])",20752,32,"/**\n             * Truncates or extends the file to the specified size in bytes.\n             * If the file is extended, the added bytes are null byte",266080,33,"@param {Object} config\n             * The object which contains",316632,36,"        *\n             * @param {Number} config.size This is required.\n             * The new file size",266081,32,1719150,33,"This is optional.\n             * The callback to be called when the file size has been successfully changed",266081,32,1719213,33,"This is optional.\n             * The callback to be called when an error occurred",266081,32,"@param {Object} config.failure.error\n             * The occurred error",266081,32,1297898,34,"        * The scope object\n             */\r\n            truncat",810560,35,"    if (config.size ",2046736,32,"Ext.Logger.error('Ext.device.filesystem.FileEntry#write: You must specify a `size` of the file.');",1456761,53,"\r\n",2626990,48,"//noinspection JSValidateTypes\r\n                this.getEntry({\r\n   ",1320766,35,"fileEntry",1439426,32,"eE",2132677,58,"        writer.truncate(config.siz",99024,33,"config.success.call(config.scope || me, me);\r\n            ",2132988,50,"            config.failure.call(config.scope || me, error",526528,54,",\r\n   ",1326594,35,"error",1295549,37,"ailure.call(config.scope || me, error",234048,44,2119422,37,");\r\n});\r\n\r\n/**\n * Cordova File APi Abstraction\n *\n * For more documentation see\n * http://docs.phonegap.com/en/2.7.0/cordova_file_file.md.html#File\n */\r\nExt.define('Ext.device.filesystem.Cordova",407728,35,"device.filesystem.PhoneGap',\r\n    extend: Ext.device.filesystem.HTML5",1916574,42,"Ext.override(Ext.device.filesystem.Entry,",265406,33,"    *\n        ",664096,33,"\n",1181196,36,"* @param {Object} config.metadata\n                 * Metadata to add to the file or directory\n",1181196,36,"* @param {Object} config.options\n                 * File creation options {create:true, exclusive:false}\n",1181196,36,"* @param {Boolean} config.options.create\n                 * Indicates if the file should be created if it doesn't exist\n",1181196,36,"* @param {Boolean} config.options.exclusive\n                 * Used with the create option only indicates whether a creation causes an error if the file already exists\n",1181196,36,1719148,34,"\n                 * The function called when the File's Metadata is written successfully\n",1181196,36,1719211,34,"\n                 * The function called when the File request causes an error\n",1181196,36,"* @param {FileError} config.failure.error\n",1181196,36,"*/\r\n            writeMetadata",810048,34,3217103,36,"this.getEntry(",1152450,32,"config.options,\r\n   ",1320766,35,"entry) {\r\n                        entry.setMetadata(",3431424,42,"config.success.call(config.scope || me);\r\n            ",2132988,50,"            config.failure.call(config.scope || me, error);\r\n                        }, config.metadata);",1014729,46,"failure:",2133002,36,"        config.failure.call(config.scope || me, error",234048,44,20752,32,"/**\n                 * \n        ",664096,33,"\n",1181196,36,"* @param {Object} config.options\n                 * File creation options {create:true, exclusive:false}\n",1181196,36,"* @param {Boolean} config.options.create\n                 * Indicates if the file should be created if it doesn't exist\n",1181196,36,"* @param {Boolean} config.options.exclusive\n                 * Used with the create option only indicates whether a creation causes an error if the file already exists\n",1181196,36,1719148,34,"\n                 * The function called when the File's Metadata is written successfully\n",1181196,36,1719211,34,"\n                 * The function called when the File request causes an error\n",1181196,36,"* @param {FileError} config.failure.error\n",1181196,36,"*/\r\n            readMetadata",810048,34,3217103,36,"this.getEntry(",1152450,32,"config.options,\r\n   ",1320766,35,"entry) {\r\n                        entry.getMetadata(function(metadata",105376,33,"config.success.call(config.scope || me, meta",229853,33,2133001,37,"            config.failure.call(config.scope || me, error",526528,54,",\r\n   ",1326594,35,"error",1295549,37,"ailure.call(config.scope || me, error",234048,44,326030,40,"Ext.override(Ext.device.filesystem.FileEntry, {\r\n            writeData: function(writer, data) {\r\n                writer.write(data.toString()",20752,32,"/**\n             * Send a file to a server\n             *",806556,32,"config\n             * ",1527942,32,"config.url\n             * URL of server to receive the file\n             *\n             * @param {Boolean} config.trustAllHosts\n             * (Optional) If true it will accept all security certificates. Defaults to false\n             *",1527942,32,"config.fileKey\n             * Name of the form element. Defaults to \"file\"\n             *",1527942,32,"config.fileName\n             * Name of the file on the server\n             *",1527942,32,"config.mimeType\n             * mime type of the data being uploaded. defaults to \"image/jpeg\"\n             *",806556,32,"config.params\n             * (Optional) set of key/value pairs to be passed along with the request\n             *\n        ",2089410,32,"hunkMode\n             * Should the data be uploaded in a chunked streaming mode. defaults to true\n             *",806556,32,"config.headers\n             * Map of header name => header values. Multiple values should be specified an array of values\n             * var headers={'headerParam':'headerValue'};\n             *\n        ",316670,32,"success\n             * The function called when the File is uploaded successfully\n             *\n        ",316670,32,"success.metadata\n             *\n        ",316670,32,"failure\n             * The function called when the File upload fail",266290,32,"@param {FileError} config.failure.error\n             *\n             * @returns {FileTransfer}\n             */\r\n            upload",810048,34,"    var options = new FileUploadOptions();\r\n                options.fileKey = config.fileKey || \"file\";\r\n                options.fileName = this.path.substr(this.path.lastIndexOf('/') + 1);\r\n                options.mimeType = config.mimeType || \"image/jpeg\";\r\n                options.params = config.params || {};\r\n                options.headers = config.headers || {};\r\n                options.chunkMode = config.chunkMode || true;\r\n                var fileTransfer = new FileTransfer();\r\n                fileTransfer.upload(this.path, encodeURI(config.url), config.success, config.failure, options, config.trustAllHosts || false);\r\n                return fileTransfer",224016,44,"    * Downloads a file from the server saving it into the Local File System\n             *",806556,32,"config\n             *",1527942,32,"config.source\n             * URL of file to download\n             *\n             * @param {Boolean} config.trustAllHosts\n             * if true it will accept all security certificates. Defaults to false\n             *",806556,32,"config.options\n             * Header parameters (Auth, etc)\n             * ",266097,45,"headers: {\n             *             \"Authorization\": \"Basic dGVzdHVzZXJuYW1lOnRlc3RwYXNzd29yZA==\"\n             *         }",266494,52,1719150,32,"\n             * The function called when the File is downloaded successfully\n             *\n        ",316670,32,"success.entry\n             * File Entry object of the downloaded file\n             *\n        ",316670,32,"failure\n             * The function called when the File download fail",266290,32,"@param {FileError} config.failure.error\n             *\n             * @returns {FileTransfer}\n             */\r\n            download",810048,34,"    var fileTransfer = new FileTransfer();\r\n                fileTransfer.download(encodeURI(config.source), this.path, config.success, config.failure, config.trustAllHosts || false, config.options || {});\r\n                return fileTransfer",2119423,38,719488,44,"device.filesystem.Chrome', {\r\n    extend: Ext.device.filesystem.HTML5,\r\n    /**\n     * Requests access to the Local File System\n     *\n     *      var me = this;\n     *      var fs = Ext.create(\"Ext.device.File\", {});\n     *      fs.requestFileSystem({\n     *          type: window.PERSISTENT,\n     *          size: 1024 * 1024,\n     *          success: function(fileSystem) {\n     *              me.fs = fileSystem;\n     *          },\n     *          failure: function(err) {\n",161563,32,"\"FileSystem Failure: \" + err.code",202886,32," });\n     *",342031,38,"An object which contains the follow options\n     * @param {Number} config.type\n     * window.TEMPORARY (0) or window.PERSISTENT (1)\n     *\n     * @param {Number} config.size\n     * Storage space, in Bytes, needed by the application",1558736,33,"config.success\n     * The function called when the filesystem is returned successfully\n     *\n     * @param {FileSystem} config.success.fs",1558736,33,"config.failure\n     * The function called when the filesystem request causes and error\n     *\n     * @param {FileError} config.failure.error\n     *\n     */\r\n    requestFileSystem",886960,34,"me = this;\r\n        config = Ext.device.filesystem.Abstract.prototype.requestFileSystem(config);\r\n        var successCallback = function(fs) {\r\n                var fileSystem = Ext.create('Ext.device.filesystem.FileSystem', fs);\r\n                config.success.call(config.scope || me, fileSystem);\r\n            };\r\n        if (config.type == window.PERSISTENT) {\r\n            if (navigator.webkitPersistentStorage) {\r\n                navigator.webkitPersistentStorage.requestQuota(config.size, function(grantedBytes",2122386,32,"webkitRequestFileSystem(config.type, grantedBytes, successCallback, config.failure)",45391,36,"} else {\r\n                window.webkitStorageInfo.requestQuota(window.PERSISTENT, config.size, function(grantedBytes",2122386,32,"webkitRequestFileSystem(config.type, grantedBytes, successCallback, config.failure)",45391,36,49632,33,"window.webkitRequestFileSystem(config.type, config.size, successCallback, config.failure",1218480,36,"@private\n */\r\nExt.define('Ext.device.filesystem.Simulator', {\r\n    extend: Ext.device.filesystem.HTML5\r\n});\r\n\r\n/**\n * Provides an API to navigate file system hierarchies.\n *\n * @mixins Ext.device.filesystem.Sencha\n *\n * @aside guide native_apis\n */\r\nExt.define('Ext.device.FileSystem",652080,32,1883167,39,"browserEnv = Ext.browser.is;\r\n        if (browserEnv.WebView) {\r\n            if (browserEnv.Cordova",643753,32,"create('Ext.device.filesystem.Cordova');\r\n            } else if (browserEnv.Sencha",643753,32,"create('Ext.device.filesystem.Sencha'",49616,34,"if (browserEnv.Chrome",584842,34,"('Ext.device.filesystem.Chrome')",662799,33,"create('Ext.device.filesystem.Simulator')",1875013,140396,2015409,117001,"alert(\"entro a save to filesystem\");",2132400,35,"LocalFileSystem.PERSISTENT",2132436,41,"console.log(fileSystem.name);\r\n            console.log(fileSystem.root.name);\r\n            console.log(fileSystem.root.fullPath);",2132463,343,"write success\"",143904,48,"console.log(\"writing to file\")",2132839,119,")",45391,36,2133000,55,2133060,42,"vent) {\r\n            console.log(evt.target.",2133135,39,"//Ext.device.FileSystem.requestFileSystem({\r\n    //    type:LocalFileSystem.PERSISTENT,\r\n    //    //size:1024*1024,\r\n    //    success:function(filesystem){\r\n    //        filesystem.root.getFile({\r\n    //            path: name + \".pdf\",\r\n    //            options: {create: true, exclusive: false},\r\n    //            success: function (entry) {\r\n    //                alert(\"success getting file: \" + entry);\r\n    //\r\n    //                entry.write({\r\n    //                    data: file,\r\n    //                    append: false,\r\n    //   ",1320766,35,"){\r\n    //                        alert('successfully written');\r\n    //                    },\r\n    //   ",1326594,35,"error){\r\n    //                        alert('error writing: ' + error.code);\r\n    //                    }\r\n    //                });\r\n    //            },\r\n    //            failure: function (error) {\r\n    //                alert(\"error getting file: \" + error.code);\r\n    //            }\r\n    //        });\r\n    //    },\r\n    //    failure: function(error){\r\n    //        alert(\"error requesting file system\");\r\n    //    }\r\n    //});",2133168,22599,"6",628848,35,2632415,44,3213888,62,2631584,90,"Es necesaria una</br>",2156015,68,"</br>",2156083,6975,2669919,133,"phoneToggle",2504927,213,"Ext.ComponentQuery.query('view2-p",2808874,308,2785054,35,"phone",2504927,41,2713887,33,2670703,352,"9-03",2700592,42,"3",3236848,50,"3",2700686,267,2164608,783,"850 / 568",3433264,41,2494432,87,2165503,74,"style: {\r\n                    'position': 'relative',\r\n                    'top': -120 * 568 /",2811359,39,2134544,85,2594912,40,3296048,74,2652928,52,2165808,334973,"2",2500781,29667,2539248,38,2696042,53,2530448,12202,2539248,38,2696042,53,2547776,162,2542812,36215,",\r\n",2586795,39,2579023,11039,2539248,38,2696042,53,2590062,10648,2539248,38,2696042,53,2547776,160,"5",2542811,470,2601341,15357,"bottom",2790256,32,2579007,66,"17",2717391,42,2616800,18283,2539248,38,2696042,53,2633440,38,2638153,481,"2",3236848,50,"6v2",2638688,237,"Derecha",2634656,148,2636048,2067,2539248,38,2696042,53,2633440,38,2638153,10472,"'10 0 10 1",3179088,36,2587840,182,2650957,33,"2",2650991,32,2648909,5627,"$(window).width()",2654548,39,"$(window).height",2654653,41,2654752,39,"top",2654797,51,2654734,40181,"40px'",101568,33,2137712,43,2694640,57,2695053,269,"20px'",101568,33,2137712,43,2694640,57,2695460,3669,"5px',\r\n",2536767,51,2699838,35,2699223,242,"5",2699821,46,2699513,56,"15",2699821,46,"emailButton",2699773,47,"5px',\r\n",3424463,33,2699820,47,2699762,1408,2701172,78,"46",2717392,41,2147440,73,"top",2591040,39,2701931,41,2586704,44,3288624,104,3432719,46,2546320,38,"marginTop",3159040,34,3284067,35,2701568,148,"0 20 10 2",2150463,64,3393816,76,3458448,40,2695936,55,2701961,84508,"3",2732527,48,"height: 23",2786528,118,"-icon.png',\r\n",2752919,66,2786720,274809,3061529,399071,"    $(document).ready(function(",1901819,43,"\"deviceready\"",2117952,32,"alert(\"entro a device ready\");\r\n",2811951,56,"doc.text(20, 25, \"Esto es una prueba\");\r\n",2491772,57,2581727,43,"Prueba\");\r\n",350764,32,"});\r\n    },\r\n    onBodyLoad: function() {",2076543,36,"\"deviceready\", function() {\r\n            alert(\"entro a device ready\");\r\n        }, false",3460592,83]